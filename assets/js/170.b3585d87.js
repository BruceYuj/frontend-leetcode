(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{537:function(t,a,s){"use strict";s.r(a);var i=s(27),r=Object(i.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("strong",[t._v("文本更新于 2020年05月29日 12:18:59")])]),t._v(" "),s("h2",{attrs:{id:"线段树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线段树"}},[t._v("#")]),t._v(" 线段树")]),t._v(" "),s("p",[t._v("segment tree 是一种 tree data structure，被用于存储 segment 的信息，允许快速查询结构内包含某一点的所有区间。")]),t._v(" "),s("p",[t._v("对于一个包含 "),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"n"}})],1)],1)],1),t._v(" 个区间的线段树，空间复杂度为 "),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"O"}})],1),s("mjx-mo",{staticClass:"mjx-n"},[s("mjx-c",{attrs:{c:"("}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"n"}})],1),s("mjx-mo",{staticClass:"mjx-n"},[s("mjx-c",{attrs:{c:")"}})],1)],1)],1),t._v("，查询的时间复杂度为 "),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"O"}})],1),s("mjx-mo",{staticClass:"mjx-n"},[s("mjx-c",{attrs:{c:"("}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"l"}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"o"}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"g"}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"n"}})],1),s("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[s("mjx-c",{attrs:{c:"+"}})],1),s("mjx-mi",{staticClass:"mjx-i",attrs:{space:"3"}},[s("mjx-c",{attrs:{c:"K"}})],1),s("mjx-mo",{staticClass:"mjx-n"},[s("mjx-c",{attrs:{c:")"}})],1)],1)],1),t._v(", "),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"K"}})],1)],1)],1),t._v(" 是符合条件的区间数量。")],1),t._v(" "),s("p",[t._v("线段树可以推广到高维度。")]),t._v(" "),s("p",[t._v("常见的应用：")]),t._v(" "),s("ol",[s("li",[t._v("区间求和查询")]),t._v(" "),s("li",[t._v("区间最小值或最大值的查询")]),t._v(" "),s("li",[t._v("区间异或值的查询")])]),t._v(" "),s("h3",{attrs:{id:"实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),s("p",[t._v("我们可以通过一个 "),s("strong",[t._v("完全二叉树")]),t._v(" 来存储每一个区间的数据。同时这个二叉树使用数组来存储（和堆的实现方式相同）。")]),t._v(" "),s("p",[t._v("假设，一个长度 "),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"n"}})],1)],1)],1),t._v(" 的数组 "),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"a"}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"r"}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"r"}})],1)],1)],1),t._v(", 则其对应的线段树 "),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"T"}})],1)],1)],1),t._v(" 的各个节点含义如下：")],1),t._v(" "),s("ol",[s("li",[s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"T"}})],1)],1)],1),t._v(" 的根节点表示整个数组区间信息")],1),t._v(" "),s("li",[s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"T"}})],1)],1)],1),t._v(" 的叶子节点对应数组单个元素代表的区间信息")],1),t._v(" "),s("li",[s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"T"}})],1)],1)],1),t._v(" 的中间节点存储某一区间的 "),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"a"}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"r"}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"r"}})],1),s("mjx-mo",{staticClass:"mjx-n"},[s("mjx-c",{attrs:{c:"["}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"i"}})],1),s("mjx-mo",{staticClass:"mjx-n"},[s("mjx-c",{attrs:{c:"."}})],1),s("mjx-mo",{staticClass:"mjx-n",attrs:{space:"2"}},[s("mjx-c",{attrs:{c:"."}})],1),s("mjx-mi",{staticClass:"mjx-i",attrs:{space:"2"}},[s("mjx-c",{attrs:{c:"j"}})],1),s("mjx-mo",{staticClass:"mjx-n"},[s("mjx-c",{attrs:{c:"]"}})],1)],1)],1),t._v(" 的区间信息")],1)]),t._v(" "),s("p",[t._v("通常线段树支持两种操作：")]),t._v(" "),s("ol",[s("li",[t._v("update: 更新数组中的元素并更新线段树")]),t._v(" "),s("li",[t._v("query: 查询某一区间的对应信息")])]),t._v(" "),s("h4",{attrs:{id:"线段树的初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线段树的初始化"}},[t._v("#")]),t._v(" 线段树的初始化")]),t._v(" "),s("p",[t._v("初始化自底向上进行。从每一个叶子节点，向上构建。\n"),s("strong",[t._v("这里需要注意，我们从下标 1 开始，下标 0 舍弃。因此对于数组中任意结点 "),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"i"}})],1)],1)],1),t._v("， 左子结点为 "),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mn",{staticClass:"mjx-n"},[s("mjx-c",{attrs:{c:"2"}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"i"}})],1)],1)],1),t._v(", 右子节点为 "),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:" MJX-TEX"},[s("mjx-mn",{staticClass:"mjx-n"},[s("mjx-c",{attrs:{c:"2"}})],1),s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"i"}})],1),s("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[s("mjx-c",{attrs:{c:"+"}})],1),s("mjx-mn",{staticClass:"mjx-n",attrs:{space:"3"}},[s("mjx-c",{attrs:{c:"1"}})],1)],1)],1)],1)]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("procedure construction(arr)\n  n <- length of arr\n  data <- array of length 2 * n\n  copy arr to second half of data\n\n  for idx = n-1 ... 1 do\n    data[idx] <- min(data[2*idx], data[2*idx+1])\n")])])]),s("h4",{attrs:{id:"线段树的更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线段树的更新"}},[t._v("#")]),t._v(" 线段树的更新")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("procedure update(idx, value) \n  idx <- idx + n\n  data[idx] <- value\n\n  while idx > 1 do\n    idx <- idx/2\n    data[idx] = min(data[2*idx], data[2*idx+1])\n")])])]),s("h4",{attrs:{id:"线段树的查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线段树的查询"}},[t._v("#")]),t._v(" 线段树的查询")]),t._v(" "),s("p",[t._v("区间查询大体上可以分为3种情况讨论：")]),t._v(" "),s("ol",[s("li",[t._v("当前结点所代表的区间完全位于给定需要被查询的区间之外，则不应考虑当前结点")]),t._v(" "),s("li",[t._v("当前结点所代表的区间完全位于给定需要被查询的区间之内，则可以直接查看当前结点的母结点")]),t._v(" "),s("li",[t._v("当前结点所代表的区间部分位于需要被查询的区间之内，部分位于其外，则我们先考虑位于区间外的部分，后考虑区间内的（注意总有可能找到完全位于区间内的结点，因为叶子结点的区间长度为1，因此我们总能组合出合适的区间）")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("procedure minmum(left, right) \n  left <- left + n, right <- right + n\n  minmum <- infinity\n\n  while left <= right do\n    if left is odd then // left is out of range of parent interval, check value of left node first, then shift it right in the same level\n      minimum <- min(minimum, data[left])\n      left <- left+1\n\n    if right is even then // right is out of range of current interval, shift it left in the same level and then check the value\n      minimum <- min(minimum, data[right])\n      right <- right-1\n\n    left <- left/2, right <- right/2\n\n  return minimum\n")])])]),s("h4",{attrs:{id:"数组长度不是-2-的次方怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组长度不是-2-的次方怎么办"}},[t._v("#")]),t._v(" 数组长度不是 2 的次方怎么办")]),t._v(" "),s("p",[t._v("本解法仍然适用。")]),t._v(" "),s("h2",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" reference")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://www.youtube.com/watch?v=Oq2E2yGadnU",target:"_blank",rel:"noopener noreferrer"}},[t._v("youtube, segment tree"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Segment_tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("wiki, segment tree"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/Yaokai_AssultMaster/article/details/79599809",target:"_blank",rel:"noopener noreferrer"}},[t._v("线段树"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/jakobkogler/Algorithm-DataStructures/blob/master/RangeQuery/SegmentTree.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python, segmentTree"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);